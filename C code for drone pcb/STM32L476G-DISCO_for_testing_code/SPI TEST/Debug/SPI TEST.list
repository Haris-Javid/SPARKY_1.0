
SPI TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000272c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080028b4  080028b4  000038b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002938  08002938  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002938  08002938  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002938  08002938  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00003938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800293c  0800293c  0000393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002940  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800294c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800294c  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d62  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001862  00000000  00000000  0000bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0000d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f3  00000000  00000000  0000df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a8b  00000000  00000000  0000e643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e40  00000000  00000000  000330ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e17d8  00000000  00000000  0003bf0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  0011d72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0011fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800289c 	.word	0x0800289c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800289c 	.word	0x0800289c

080001c8 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi1;


static inline void nRF24_CE_L() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001d2:	4802      	ldr	r0, [pc, #8]	@ (80001dc <nRF24_CE_L+0x14>)
 80001d4:	f001 f8cc 	bl	8001370 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	48001000 	.word	0x48001000

080001e0 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ea:	4802      	ldr	r0, [pc, #8]	@ (80001f4 <nRF24_CE_H+0x14>)
 80001ec:	f001 f8c0 	bl	8001370 <HAL_GPIO_WritePin>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	48001000 	.word	0x48001000

080001f8 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <nRF24_CSN_L+0x14>)
 8000204:	f001 f8b4 	bl	8001370 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	48001000 	.word	0x48001000

08000210 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800021a:	4802      	ldr	r0, [pc, #8]	@ (8000224 <nRF24_CSN_H+0x14>)
 800021c:	f001 f8a8 	bl	8001370 <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	48001000 	.word	0x48001000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b09c      	sub	sp, #112	@ 0x70
 800022c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fd6f 	bl	8000d10 <HAL_Init>
 // uint8_t send_spi_reg_addr = {0x8f}; // 10 001111
 // uint8_t rec_spi_id_data= {0x00};
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f8a9 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f937 	bl	80004a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800023a:	f000 f8f7 	bl	800042c <MX_SPI1_Init>
  uint8_t addr[5] = {'D', 'R', 'O', 'N', 'E'};
 800023e:	4a4c      	ldr	r2, [pc, #304]	@ (8000370 <main+0x148>)
 8000240:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000248:	6018      	str	r0, [r3, #0]
 800024a:	3304      	adds	r3, #4
 800024c:	7019      	strb	r1, [r3, #0]
  nRF24_set_up(5, 78, nRF24_DR_2Mbps, nRF24_TXPWR_12dBm, nRF24_CRC_2byte, nRF24_ARD_250us, 5 , nRF24_PIPE0, addr,nRF24_AA_ON  , 16);
 800024e:	2310      	movs	r3, #16
 8000250:	9306      	str	r3, [sp, #24]
 8000252:	2301      	movs	r3, #1
 8000254:	9305      	str	r3, [sp, #20]
 8000256:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800025a:	9304      	str	r3, [sp, #16]
 800025c:	2300      	movs	r3, #0
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	2305      	movs	r3, #5
 8000262:	9302      	str	r3, [sp, #8]
 8000264:	2300      	movs	r3, #0
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	230c      	movs	r3, #12
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2302      	movs	r3, #2
 800026e:	2208      	movs	r2, #8
 8000270:	214e      	movs	r1, #78	@ 0x4e
 8000272:	2005      	movs	r0, #5
 8000274:	f000 f94a 	bl	800050c <nRF24_set_up>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2180      	movs	r1, #128	@ 0x80
 800027c:	483d      	ldr	r0, [pc, #244]	@ (8000374 <main+0x14c>)
 800027e:	f001 f877 	bl	8001370 <HAL_GPIO_WritePin>
  //HAL_SPI_Receive(&hspi2, &rec_spi_id_data, 1, 200);
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);



  uint8_t send_SPI_data[12] =  {
 8000282:	4a3d      	ldr	r2, [pc, #244]	@ (8000378 <main+0x150>)
 8000284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000288:	ca07      	ldmia	r2, {r0, r1, r2}
 800028a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    0x08, // OBSERVE_TX
		    0x09, // RPD
		    0x0A, // RX_ADDR_P0 (first byte)
		    0x10, // TX_ADDR (first byte)
			};
  uint8_t received_SPI_data[12]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800028e:	4a3b      	ldr	r2, [pc, #236]	@ (800037c <main+0x154>)
 8000290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000294:	ca07      	ldmia	r2, {r0, r1, r2}
 8000296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  //nRF24_CSN_L();
 // HAL_Delay(1);
 // HAL_SPI_Transmit(&hspi1,send_SPI_data, 1, 200);
 // HAL_SPI_Receive(&hspi1,received_SPI_data, 1, 200);
  //nRF24_CSN_H();
  uint8_t test_data[]= "hi this is drone";
 800029a:	4b39      	ldr	r3, [pc, #228]	@ (8000380 <main+0x158>)
 800029c:	f107 0414 	add.w	r4, r7, #20
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	682b      	ldr	r3, [r5, #0]
 80002a8:	7023      	strb	r3, [r4, #0]
  nRF24_start_sending(test_data, 15);
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	210f      	movs	r1, #15
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f990 	bl	80005d6 <nRF24_start_sending>

    for(int x=0; x<12;x++){
 80002b6:	2300      	movs	r3, #0
 80002b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80002ba:	e024      	b.n	8000306 <main+0xde>
        uint8_t tx_buf[2] = { send_SPI_data[x], 0xFF };  // Command and dummy byte
 80002bc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80002c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	743b      	strb	r3, [r7, #16]
 80002c8:	23ff      	movs	r3, #255	@ 0xff
 80002ca:	747b      	strb	r3, [r7, #17]
        uint8_t rx_buf[2] = { 0 };
 80002cc:	2300      	movs	r3, #0
 80002ce:	81bb      	strh	r3, [r7, #12]
        nRF24_CSN_L();
 80002d0:	f7ff ff92 	bl	80001f8 <nRF24_CSN_L>
        HAL_Delay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 fd97 	bl	8000e08 <HAL_Delay>
        HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 2, 200);
 80002da:	f107 020c 	add.w	r2, r7, #12
 80002de:	f107 0110 	add.w	r1, r7, #16
 80002e2:	23c8      	movs	r3, #200	@ 0xc8
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	2302      	movs	r3, #2
 80002e8:	4826      	ldr	r0, [pc, #152]	@ (8000384 <main+0x15c>)
 80002ea:	f001 ff28 	bl	800213e <HAL_SPI_TransmitReceive>
    	nRF24_CSN_H();
 80002ee:	f7ff ff8f 	bl	8000210 <nRF24_CSN_H>
    	received_SPI_data[x] = rx_buf[1];
 80002f2:	7b79      	ldrb	r1, [r7, #13]
 80002f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80002f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80002fa:	4413      	add	r3, r2
 80002fc:	460a      	mov	r2, r1
 80002fe:	701a      	strb	r2, [r3, #0]
    for(int x=0; x<12;x++){
 8000300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000302:	3301      	adds	r3, #1
 8000304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000308:	2b0b      	cmp	r3, #11
 800030a:	ddd7      	ble.n	80002bc <main+0x94>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  nRF24_start_sending(test_data, 15);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	210f      	movs	r1, #15
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f95f 	bl	80005d6 <nRF24_start_sending>
	    for(int x=0; x<12;x++){
 8000318:	2300      	movs	r3, #0
 800031a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800031c:	e023      	b.n	8000366 <main+0x13e>
	        uint8_t tx_buf[2] = { send_SPI_data[x], 0xFF };  // Command and dummy byte
 800031e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000324:	4413      	add	r3, r2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	723b      	strb	r3, [r7, #8]
 800032a:	23ff      	movs	r3, #255	@ 0xff
 800032c:	727b      	strb	r3, [r7, #9]
	        uint8_t rx_buf[2] = { 0 };
 800032e:	2300      	movs	r3, #0
 8000330:	80bb      	strh	r3, [r7, #4]
	        nRF24_CSN_L();
 8000332:	f7ff ff61 	bl	80001f8 <nRF24_CSN_L>
	        HAL_Delay(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f000 fd66 	bl	8000e08 <HAL_Delay>
	        HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 2, 200);
 800033c:	1d3a      	adds	r2, r7, #4
 800033e:	f107 0108 	add.w	r1, r7, #8
 8000342:	23c8      	movs	r3, #200	@ 0xc8
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2302      	movs	r3, #2
 8000348:	480e      	ldr	r0, [pc, #56]	@ (8000384 <main+0x15c>)
 800034a:	f001 fef8 	bl	800213e <HAL_SPI_TransmitReceive>
	    	nRF24_CSN_H();
 800034e:	f7ff ff5f 	bl	8000210 <nRF24_CSN_H>
	    	received_SPI_data[x] = rx_buf[1];
 8000352:	7979      	ldrb	r1, [r7, #5]
 8000354:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800035a:	4413      	add	r3, r2
 800035c:	460a      	mov	r2, r1
 800035e:	701a      	strb	r2, [r3, #0]
	    for(int x=0; x<12;x++){
 8000360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000362:	3301      	adds	r3, #1
 8000364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000368:	2b0b      	cmp	r3, #11
 800036a:	ddd8      	ble.n	800031e <main+0xf6>
	  nRF24_start_sending(test_data, 15);
 800036c:	e7ce      	b.n	800030c <main+0xe4>
 800036e:	bf00      	nop
 8000370:	080028b4 	.word	0x080028b4
 8000374:	48000c00 	.word	0x48000c00
 8000378:	080028bc 	.word	0x080028bc
 800037c:	080028c8 	.word	0x080028c8
 8000380:	080028d4 	.word	0x080028d4
 8000384:	20000028 	.word	0x20000028

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b096      	sub	sp, #88	@ 0x58
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	2244      	movs	r2, #68	@ 0x44
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fa54 	bl	8002844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	463b      	mov	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ae:	f001 f805 	bl	80013bc <HAL_PWREx_ControlVoltageScaling>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003b8:	f000 f922 	bl	8000600 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003bc:	2310      	movs	r3, #16
 80003be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003c8:	2360      	movs	r3, #96	@ 0x60
 80003ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003d0:	2301      	movs	r3, #1
 80003d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80003d8:	2314      	movs	r3, #20
 80003da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003dc:	2307      	movs	r3, #7
 80003de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 f83b 	bl	8001468 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003f8:	f000 f902 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2303      	movs	r3, #3
 8000402:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000404:	2380      	movs	r3, #128	@ 0x80
 8000406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	2101      	movs	r1, #1
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fc03 	bl	8001c20 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000420:	f000 f8ee 	bl	8000600 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3758      	adds	r7, #88	@ 0x58
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <MX_SPI1_Init+0x78>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000438:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800043c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000444:	4b16      	ldr	r3, [pc, #88]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000446:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800044a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800045a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800045e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000462:	2220      	movs	r2, #32
 8000464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800047a:	2207      	movs	r2, #7
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000486:	2208      	movs	r2, #8
 8000488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800048c:	f001 fdb4 	bl	8001ff8 <HAL_SPI_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000496:	f000 f8b3 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000028 	.word	0x20000028
 80004a4:	40013000 	.word	0x40013000

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_GPIO_Init+0x5c>)
 80004be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c0:	4a10      	ldr	r2, [pc, #64]	@ (8000504 <MX_GPIO_Init+0x5c>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_GPIO_Init+0x5c>)
 80004ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80004da:	480b      	ldr	r0, [pc, #44]	@ (8000508 <MX_GPIO_Init+0x60>)
 80004dc:	f000 ff48 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80004e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80004e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	4804      	ldr	r0, [pc, #16]	@ (8000508 <MX_GPIO_Init+0x60>)
 80004f8:	f000 fd90 	bl	800101c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	48001000 	.word	0x48001000

0800050c <nRF24_set_up>:

/* USER CODE BEGIN 4 */
void nRF24_set_up(uint8_t width, uint8_t channel, uint8_t data_rate, uint8_t power_level, uint8_t CRC_mode, uint8_t delay, uint8_t attempts, uint8_t rx_pipe, uint8_t *addr, uint8_t AA_state, uint8_t payload_size)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4604      	mov	r4, r0
 8000514:	4608      	mov	r0, r1
 8000516:	4611      	mov	r1, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4623      	mov	r3, r4
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	4603      	mov	r3, r0
 8000520:	71bb      	strb	r3, [r7, #6]
 8000522:	460b      	mov	r3, r1
 8000524:	717b      	strb	r3, [r7, #5]
 8000526:	4613      	mov	r3, r2
 8000528:	713b      	strb	r3, [r7, #4]
    // Set the address width (3, 4, or 5 bytes)
    nRF24_SetAddrWidth(width); // Recommended: 5-byte address width
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f99e 	bl	800086e <nRF24_SetAddrWidth>

    // Set the RF channel for communication (channel 0-125)
    nRF24_SetRFChannel(channel); // Set the channel (0-125)
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f971 	bl	800081c <nRF24_SetRFChannel>

    // Set the data rate (250kbps, 1Mbps, or 2Mbps)
    nRF24_SetDataRate(data_rate); // Set the data rate
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fa0c 	bl	800095a <nRF24_SetDataRate>

    // Set the TX power level (available options depend on module, usually -18dBm to +3dBm)
    nRF24_SetTXPower(power_level); // Set the transmission power level
 8000542:	793b      	ldrb	r3, [r7, #4]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f9ed 	bl	8000924 <nRF24_SetTXPower>

    // Set CRC mode (disable, 1-byte CRC, or 2-byte CRC)
    nRF24_SetCRCScheme(CRC_mode); // Set CRC scheme (disabled, CRC-1, or CRC-2)
 800054a:	7e3b      	ldrb	r3, [r7, #24]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f944 	bl	80007da <nRF24_SetCRCScheme>

    // Set auto-retransmit delay (ARD) and attempts (ARC)
    nRF24_SetAutoRetr(delay, attempts); // Configure retransmit delay and number of attempts (0-15)
 8000552:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000556:	7f3b      	ldrb	r3, [r7, #28]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96c 	bl	8000838 <nRF24_SetAutoRetr>

    // Set the TX pipe address (used for transmission)
    nRF24_SetTXAddr(addr); // Set the TX pipe address
 8000560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000562:	f000 fa69 	bl	8000a38 <nRF24_SetTXAddr>

    // Set the RX pipe address (must match the TX address for auto acknowledgment)
    nRF24_SetAddr(rx_pipe, addr); // Set the RX pipe address (should match TX address)
 8000566:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800056a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f98f 	bl	8000890 <nRF24_SetAddr>

    // Enable AA (Auto Acknowledgment) for the specified RX pipe
    nRF24_EnableAA(rx_pipe); // Enable AA on the given RX pipe (0-5)
 8000572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fa84 	bl	8000a84 <nRF24_EnableAA>

    // Set the RX pipe with AA state (enabled/disabled) and payload size (1-32 bytes)
    nRF24_SetRXPipe(rx_pipe, AA_state, payload_size); // Configure RX pipe with AA and payload size
 800057c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000580:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8000584:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fa01 	bl	8000990 <nRF24_SetRXPipe>

    nRF24_DisableAA(nRF24_PIPE1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fa95 	bl	8000abe <nRF24_DisableAA>

    nRF24_DisableAA(nRF24_PIPE2);
 8000594:	2002      	movs	r0, #2
 8000596:	f000 fa92 	bl	8000abe <nRF24_DisableAA>

  	nRF24_DisableAA(nRF24_PIPE3);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 fa8f 	bl	8000abe <nRF24_DisableAA>

    nRF24_DisableAA(nRF24_PIPE4);
 80005a0:	2004      	movs	r0, #4
 80005a2:	f000 fa8c 	bl	8000abe <nRF24_DisableAA>

    nRF24_DisableAA(nRF24_PIPE5);
 80005a6:	2005      	movs	r0, #5
 80005a8:	f000 fa89 	bl	8000abe <nRF24_DisableAA>

    nRF24_SetPowerMode(nRF24_PWR_UP); // powering up module so that it can stay in standby-1 mode
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 f8d4 	bl	800075a <nRF24_SetPowerMode>
    }
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd90      	pop	{r4, r7, pc}

080005ba <nRF24_Switch_to_TX_mode>:
        return RX_RECEIVED;
    }
    return NO_DATA;
}

void nRF24_Switch_to_TX_mode(){
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
	 nRF24_SetOperationalMode(nRF24_MODE_TX);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f8ea 	bl	8000798 <nRF24_SetOperationalMode>
	 nRF24_CE_H();
 80005c4:	f7ff fe0c 	bl	80001e0 <nRF24_CE_H>
	 HAL_Delay(1);// TX_15us_delay() // Needs to be at least 10 μs
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fc1d 	bl	8000e08 <HAL_Delay>
	 nRF24_CE_L();
 80005ce:	f7ff fdfb 	bl	80001c8 <nRF24_CE_L>
};
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <nRF24_start_sending>:



void nRF24_start_sending(uint8_t *data, uint8_t length) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	70fb      	strb	r3, [r7, #3]
        nRF24_FlushTX();
 80005e2:	f000 fa93 	bl	8000b0c <nRF24_FlushTX>
        nRF24_ClearIRQFlags();
 80005e6:	f000 fa99 	bl	8000b1c <nRF24_ClearIRQFlags>
        nRF24_WritePayload(data, length);
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 faa9 	bl	8000b46 <nRF24_WritePayload>
        nRF24_Switch_to_TX_mode();
 80005f4:	f7ff ffe1 	bl	80005ba <nRF24_Switch_to_TX_mode>
    }
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <Error_Handler+0x8>

0800060c <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <nRF24_CSN_L+0x14>)
 8000618:	f000 feaa 	bl	8001370 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48001000 	.word	0x48001000

08000624 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062e:	4802      	ldr	r0, [pc, #8]	@ (8000638 <nRF24_CSN_H+0x14>)
 8000630:	f000 fe9e 	bl	8001370 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	48001000 	.word	0x48001000

0800063c <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000646:	f107 020f 	add.w	r2, r7, #15
 800064a:	1df9      	adds	r1, r7, #7
 800064c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <nRF24_LL_RW+0x34>)
 8000656:	f001 fd72 	bl	800213e <HAL_SPI_TransmitReceive>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000660:	f7ff ffce 	bl	8000600 <Error_Handler>
    };
    return result;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028

08000674 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800067e:	f7ff ffc5 	bl	800060c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 031f 	and.w	r3, r3, #31
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffd6 	bl	800063c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000690:	20ff      	movs	r0, #255	@ 0xff
 8000692:	f7ff ffd3 	bl	800063c <nRF24_LL_RW>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800069a:	f7ff ffc3 	bl	8000624 <nRF24_CSN_H>

	return value;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80006b8:	f7ff ffa8 	bl	800060c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b1f      	cmp	r3, #31
 80006c0:	d810      	bhi.n	80006e4 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffb1 	bl	800063c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffad 	bl	800063c <nRF24_LL_RW>
 80006e2:	e013      	b.n	800070c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffa8 	bl	800063c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2be1      	cmp	r3, #225	@ 0xe1
 80006f0:	d00c      	beq.n	800070c <nRF24_WriteReg+0x64>
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2be2      	cmp	r3, #226	@ 0xe2
 80006f6:	d009      	beq.n	800070c <nRF24_WriteReg+0x64>
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2be3      	cmp	r3, #227	@ 0xe3
 80006fc:	d006      	beq.n	800070c <nRF24_WriteReg+0x64>
(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2bff      	cmp	r3, #255	@ 0xff
 8000702:	d003      	beq.n	800070c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff98 	bl	800063c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800070c:	f7ff ff8a 	bl	8000624 <nRF24_CSN_H>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000728:	f7ff ff70 	bl	800060c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff84 	bl	800063c <nRF24_LL_RW>
	while (count--) {
 8000734:	e006      	b.n	8000744 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	603a      	str	r2, [r7, #0]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff7c 	bl	800063c <nRF24_LL_RW>
	while (count--) {
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	71ba      	strb	r2, [r7, #6]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f3      	bne.n	8000736 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800074e:	f7ff ff69 	bl	8000624 <nRF24_CSN_H>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <nRF24_SetPowerMode>:
}

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ff85 	bl	8000674 <nRF24_ReadReg>
 800076a:	4603      	mov	r3, r0
 800076c:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d104      	bne.n	800077e <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e003      	b.n	8000786 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f023 0302 	bic.w	r3, r3, #2
 8000784:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4619      	mov	r1, r3
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff8c 	bl	80006a8 <nRF24_WriteReg>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff66 	bl	8000674 <nRF24_ReadReg>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4619      	mov	r1, r3
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff6b 	bl	80006a8 <nRF24_WriteReg>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80007da:	b580      	push	{r7, lr}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff45 	bl	8000674 <nRF24_ReadReg>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f023 030c 	bic.w	r3, r3, #12
 80007f4:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	f003 030c 	and.w	r3, r3, #12
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000804:	4313      	orrs	r3, r2
 8000806:	b25b      	sxtb	r3, r3
 8000808:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	4619      	mov	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff4a 	bl	80006a8 <nRF24_WriteReg>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4619      	mov	r1, r3
 800082a:	2005      	movs	r0, #5
 800082c:	f7ff ff3c 	bl	80006a8 <nRF24_WriteReg>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	b25a      	sxtb	r2, r3
 800084e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4619      	mov	r1, r3
 8000860:	2004      	movs	r0, #4
 8000862:	f7ff ff21 	bl	80006a8 <nRF24_WriteReg>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3b02      	subs	r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	2003      	movs	r0, #3
 8000882:	f7ff ff11 	bl	80006a8 <nRF24_WriteReg>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d00a      	beq.n	80008b8 <nRF24_SetAddr+0x28>
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	dc36      	bgt.n	8000914 <nRF24_SetAddr+0x84>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	dc02      	bgt.n	80008b0 <nRF24_SetAddr+0x20>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da04      	bge.n	80008b8 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 80008ae:	e031      	b.n	8000914 <nRF24_SetAddr+0x84>
 80008b0:	3b02      	subs	r3, #2
	switch (pipe) {
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d82e      	bhi.n	8000914 <nRF24_SetAddr+0x84>
 80008b6:	e023      	b.n	8000900 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80008b8:	2003      	movs	r0, #3
 80008ba:	f7ff fedb 	bl	8000674 <nRF24_ReadReg>
 80008be:	4603      	mov	r3, r0
 80008c0:	3301      	adds	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80008cc:	f7ff fe9e 	bl	800060c <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <nRF24_SetAddr+0x90>)
 80008d4:	5cd3      	ldrb	r3, [r2, r3]
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fead 	bl	800063c <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	603a      	str	r2, [r7, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fea6 	bl	800063c <nRF24_LL_RW>
			} while (addr_width--);
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	73fa      	strb	r2, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f3      	bne.n	80008e2 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 80008fa:	f7ff fe93 	bl	8000624 <nRF24_CSN_H>
			break;
 80008fe:	e00a      	b.n	8000916 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <nRF24_SetAddr+0x90>)
 8000904:	5cd2      	ldrb	r2, [r2, r3]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	4610      	mov	r0, r2
 800090e:	f7ff fecb 	bl	80006a8 <nRF24_WriteReg>
			break;
 8000912:	e000      	b.n	8000916 <nRF24_SetAddr+0x86>
			break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	080028f0 	.word	0x080028f0

08000924 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff fea0 	bl	8000674 <nRF24_ReadReg>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	f023 0306 	bic.w	r3, r3, #6
 800093e:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4313      	orrs	r3, r2
 8000946:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	4619      	mov	r1, r3
 800094c:	2006      	movs	r0, #6
 800094e:	f7ff feab 	bl	80006a8 <nRF24_WriteReg>
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000964:	2006      	movs	r0, #6
 8000966:	f7ff fe85 	bl	8000674 <nRF24_ReadReg>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000974:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4313      	orrs	r3, r2
 800097c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4619      	mov	r1, r3
 8000982:	2006      	movs	r0, #6
 8000984:	f7ff fe90 	bl	80006a8 <nRF24_WriteReg>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	4613      	mov	r3, r2
 80009a0:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fe66 	bl	8000674 <nRF24_ReadReg>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b25a      	sxtb	r2, r3
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009c0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4619      	mov	r1, r3
 80009c6:	2002      	movs	r0, #2
 80009c8:	f7ff fe6e 	bl	80006a8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <nRF24_SetRXPipe+0xa4>)
 80009d0:	5cd2      	ldrb	r2, [r2, r3]
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f7ff fe63 	bl	80006a8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fe46 	bl	8000674 <nRF24_ReadReg>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d10a      	bne.n	8000a08 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2201      	movs	r2, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e00b      	b.n	8000a20 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	b25a      	sxtb	r2, r3
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	4619      	mov	r1, r3
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe3f 	bl	80006a8 <nRF24_WriteReg>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	080028e8 	.word	0x080028e8

08000a38 <nRF24_SetTXAddr>:

void nRF24_SetTXAddr(const uint8_t *addr) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    uint8_t addr_width;

    // Read the address width from SETUP_AW register (values 1-3 correspond to 3-5 bytes)
    addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 2;
 8000a40:	2003      	movs	r0, #3
 8000a42:	f7ff fe17 	bl	8000674 <nRF24_ReadReg>
 8000a46:	4603      	mov	r3, r0
 8000a48:	3302      	adds	r3, #2
 8000a4a:	72fb      	strb	r3, [r7, #11]

    nRF24_CSN_L();                                // Activate SPI (CSN low)
 8000a4c:	f7ff fdde 	bl	800060c <nRF24_CSN_L>
    nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR);  // Write TX_ADDR register
 8000a50:	2030      	movs	r0, #48	@ 0x30
 8000a52:	f7ff fdf3 	bl	800063c <nRF24_LL_RW>

    // Write address bytes MSB first
    for (int i = 0; i < addr_width; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e009      	b.n	8000a70 <nRF24_SetTXAddr+0x38>
        nRF24_LL_RW(addr[i]);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fde9 	bl	800063c <nRF24_LL_RW>
    for (int i = 0; i < addr_width; i++) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	7afb      	ldrb	r3, [r7, #11]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf1      	blt.n	8000a5c <nRF24_SetTXAddr+0x24>
    }

    nRF24_CSN_H();                                // Deactivate SPI (CSN high)
 8000a78:	f7ff fdd4 	bl	8000624 <nRF24_CSN_H>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fdf0 	bl	8000674 <nRF24_ReadReg>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fdf9 	bl	80006a8 <nRF24_WriteReg>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <nRF24_DisableAA>:

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	d904      	bls.n	8000ad8 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fde9 	bl	80006a8 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000ad6:	e015      	b.n	8000b04 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fdcb 	bl	8000674 <nRF24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	4013      	ands	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fdd2 	bl	80006a8 <nRF24_WriteReg>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000b10:	21ff      	movs	r1, #255	@ 0xff
 8000b12:	20e1      	movs	r0, #225	@ 0xe1
 8000b14:	f7ff fdc8 	bl	80006a8 <nRF24_WriteReg>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <nRF24_ClearIRQFlags>:
void nRF24_FlushRX(void) {
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
}

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f7ff fda6 	bl	8000674 <nRF24_ReadReg>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000b32:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2007      	movs	r0, #7
 8000b3a:	f7ff fdb5 	bl	80006a8 <nRF24_WriteReg>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	461a      	mov	r2, r3
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	20a0      	movs	r0, #160	@ 0xa0
 8000b5a:	f7ff fddd 	bl	8000718 <nRF24_WriteMBReg>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	@ (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a17      	ldr	r2, [pc, #92]	@ (8000c2c <HAL_SPI_MspInit+0x7c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d128      	bne.n	8000c24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a16      	ldr	r2, [pc, #88]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_SPI_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c14:	2305      	movs	r3, #5
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_SPI_MspInit+0x84>)
 8000c20:	f000 f9fc 	bl	800101c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48001000 	.word	0x48001000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f89b 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f001 fdb3 	bl	8002854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fa9b 	bl	8000228 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d00:	08002940 	.word	0x08002940
  ldr r2, =_sbss
 8000d04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d08:	20000090 	.word	0x20000090

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_Init+0x3c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_Init+0x3c>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f944 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f80f 	bl	8000d50 <HAL_InitTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e001      	b.n	8000d42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3e:	f7ff ff13 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d5c:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d023      	beq.n	8000dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_InitTick+0x70>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f941 	bl	8001002 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d809      	bhi.n	8000da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f919 	bl	8000fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_InitTick+0x74>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e001      	b.n	8000db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000008c 	.word	0x2000008c

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000008c 	.word	0x2000008c

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff47 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5c 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	e17f      	b.n	800132c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 8171 	beq.w	8001326 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b01      	cmp	r3, #1
 800104e:	d005      	beq.n	800105c <HAL_GPIO_Init+0x40>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d118      	bne.n	80010fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80ac 	beq.w	8001326 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b5f      	ldr	r3, [pc, #380]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	4a5e      	ldr	r2, [pc, #376]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011da:	4b5c      	ldr	r3, [pc, #368]	@ (800134c <HAL_GPIO_Init+0x330>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001350 <HAL_GPIO_Init+0x334>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x242>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_GPIO_Init+0x338>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_GPIO_Init+0x33c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	@ (800135c <HAL_GPIO_Init+0x340>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_GPIO_Init+0x344>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_GPIO_Init+0x348>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	@ (8001368 <HAL_GPIO_Init+0x34c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x22a>
 8001242:	2306      	movs	r3, #6
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001246:	2307      	movs	r3, #7
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x244>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x244>
 800125e:	2300      	movs	r3, #0
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001270:	4937      	ldr	r1, [pc, #220]	@ (8001350 <HAL_GPIO_Init+0x334>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_GPIO_Init+0x350>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a2:	4a32      	ldr	r2, [pc, #200]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012cc:	4a27      	ldr	r2, [pc, #156]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f6:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_GPIO_Init+0x350>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001320:	4a12      	ldr	r2, [pc, #72]	@ (800136c <HAL_GPIO_Init+0x350>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae78 	bne.w	800102c <HAL_GPIO_Init+0x10>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48001000 	.word	0x48001000
 8001364:	48001400 	.word	0x48001400
 8001368:	48001800 	.word	0x48001800
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e002      	b.n	8001394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40007000 	.word	0x40007000

080013bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ca:	d130      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d8:	d038      	beq.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2232      	movs	r2, #50	@ 0x32
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001400:	e002      	b.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3b01      	subs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001414:	d102      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f2      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001428:	d110      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e00f      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143a:	d007      	beq.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001444:	4a05      	ldr	r2, [pc, #20]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40007000 	.word	0x40007000
 8001460:	20000000 	.word	0x20000000
 8001464:	431bde83 	.word	0x431bde83

08001468 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e3ca      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147a:	4b97      	ldr	r3, [pc, #604]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001484:	4b94      	ldr	r3, [pc, #592]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80e4 	beq.w	8001664 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4a>
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	f040 808b 	bne.w	80015c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 8087 	bne.w	80015c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	4b89      	ldr	r3, [pc, #548]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x62>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e3a2      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	4b82      	ldr	r3, [pc, #520]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <HAL_RCC_OscConfig+0x7c>
 80014da:	4b7f      	ldr	r3, [pc, #508]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014e2:	e005      	b.n	80014f0 <HAL_RCC_OscConfig+0x88>
 80014e4:	4b7c      	ldr	r3, [pc, #496]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80014e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d223      	bcs.n	800153c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fd1d 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e383      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b73      	ldr	r3, [pc, #460]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a72      	ldr	r2, [pc, #456]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b70      	ldr	r3, [pc, #448]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	496d      	ldr	r1, [pc, #436]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001526:	4b6c      	ldr	r3, [pc, #432]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	4968      	ldr	r1, [pc, #416]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
 800153a:	e025      	b.n	8001588 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153c:	4b66      	ldr	r3, [pc, #408]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a65      	ldr	r2, [pc, #404]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b63      	ldr	r3, [pc, #396]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4960      	ldr	r1, [pc, #384]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155a:	4b5f      	ldr	r3, [pc, #380]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	495b      	ldr	r1, [pc, #364]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fcdd 	bl	8001f38 <RCC_SetFlashLatencyFromMSIRange>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e343      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001588:	f000 fc4a 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b52      	ldr	r3, [pc, #328]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	4950      	ldr	r1, [pc, #320]	@ (80016dc <HAL_RCC_OscConfig+0x274>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	4a4e      	ldr	r2, [pc, #312]	@ (80016e0 <HAL_RCC_OscConfig+0x278>)
 80015a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fbcf 	bl	8000d50 <HAL_InitTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d052      	beq.n	8001662 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	e327      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d032      	beq.n	800162e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015c8:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc0c 	bl	8000df0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc08 	bl	8000df0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e310      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ee:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fa:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a36      	ldr	r2, [pc, #216]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4931      	ldr	r1, [pc, #196]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	492c      	ldr	r1, [pc, #176]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e01a      	b.n	8001664 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800162e:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a29      	ldr	r2, [pc, #164]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163a:	f7ff fbd9 	bl	8000df0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001642:	f7ff fbd5 	bl	8000df0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e2dd      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001654:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x1da>
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001662:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d074      	beq.n	800175a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x21a>
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b0c      	cmp	r3, #12
 800167a:	d10e      	bne.n	800169a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d10b      	bne.n	800169a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d064      	beq.n	8001758 <HAL_RCC_OscConfig+0x2f0>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d160      	bne.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e2ba      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x24a>
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e026      	b.n	8001700 <HAL_RCC_OscConfig+0x298>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ba:	d115      	bne.n	80016e8 <HAL_RCC_OscConfig+0x280>
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a02      	ldr	r2, [pc, #8]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x298>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	080028f8 	.word	0x080028f8
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004
 80016e8:	4ba0      	ldr	r3, [pc, #640]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a9f      	ldr	r2, [pc, #636]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b9d      	ldr	r3, [pc, #628]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a9c      	ldr	r2, [pc, #624]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb72 	bl	8000df0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb6e 	bl	8000df0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e276      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001722:	4b92      	ldr	r3, [pc, #584]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x2a8>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb5e 	bl	8000df0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fb5a 	bl	8000df0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e262      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800174a:	4b88      	ldr	r3, [pc, #544]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x2d0>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d060      	beq.n	8001828 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x310>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d116      	bne.n	80017a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001778:	4b7c      	ldr	r3, [pc, #496]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x328>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e23f      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b76      	ldr	r3, [pc, #472]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	4973      	ldr	r1, [pc, #460]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	e040      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d023      	beq.n	80017f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6e      	ldr	r2, [pc, #440]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb19 	bl	8000df0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb15 	bl	8000df0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e21d      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d4:	4b65      	ldr	r3, [pc, #404]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b62      	ldr	r3, [pc, #392]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	495f      	ldr	r1, [pc, #380]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
 80017f4:	e018      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5c      	ldr	r2, [pc, #368]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80017fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff faf5 	bl	8000df0 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff faf1 	bl	8000df0 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1f9      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03c      	beq.n	80018ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01c      	beq.n	8001876 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183c:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001842:	4a4a      	ldr	r2, [pc, #296]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fad0 	bl	8000df0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff facc 	bl	8000df0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1d4      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ef      	beq.n	8001854 <HAL_RCC_OscConfig+0x3ec>
 8001874:	e01b      	b.n	80018ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187c:	4a3b      	ldr	r2, [pc, #236]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fab3 	bl	8000df0 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff faaf 	bl	8000df0 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1b7      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a0:	4b32      	ldr	r3, [pc, #200]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ef      	bne.n	800188e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80a6 	beq.w	8001a08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10d      	bne.n	80018e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	4a26      	ldr	r2, [pc, #152]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e4:	2301      	movs	r3, #1
 80018e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x508>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d118      	bne.n	8001926 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <HAL_RCC_OscConfig+0x508>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_RCC_OscConfig+0x508>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001900:	f7ff fa76 	bl	8000df0 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001908:	f7ff fa72 	bl	8000df0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e17a      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_RCC_OscConfig+0x508>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d8>
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800193e:	e029      	b.n	8001994 <HAL_RCC_OscConfig+0x52c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d115      	bne.n	8001974 <HAL_RCC_OscConfig+0x50c>
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194e:	4a07      	ldr	r2, [pc, #28]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195e:	4a03      	ldr	r2, [pc, #12]	@ (800196c <HAL_RCC_OscConfig+0x504>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x52c>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40007000 	.word	0x40007000
 8001974:	4b9c      	ldr	r3, [pc, #624]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	4a9b      	ldr	r2, [pc, #620]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001984:	4b98      	ldr	r3, [pc, #608]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	4a97      	ldr	r2, [pc, #604]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d016      	beq.n	80019ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fa28 	bl	8000df0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fa24 	bl	8000df0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e12a      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ed      	beq.n	80019a4 <HAL_RCC_OscConfig+0x53c>
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fa11 	bl	8000df0 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff fa0d 	bl	8000df0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e113      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e8:	4b7f      	ldr	r3, [pc, #508]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ed      	bne.n	80019d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f6:	7ffb      	ldrb	r3, [r7, #31]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fc:	4b7a      	ldr	r3, [pc, #488]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	4a79      	ldr	r2, [pc, #484]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80fe 	beq.w	8001c0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	f040 80d0 	bne.w	8001bbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a1c:	4b72      	ldr	r3, [pc, #456]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d130      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d127      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11f      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a5c:	2a07      	cmp	r2, #7
 8001a5e:	bf14      	ite	ne
 8001a60:	2201      	movne	r2, #1
 8001a62:	2200      	moveq	r2, #0
 8001a64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d113      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d06e      	beq.n	8001b70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d069      	beq.n	8001b6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a98:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001aa4:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0ad      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac0:	f7ff f996 	bl	8000df0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f992 	bl	8000df0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e09a      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ada:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae6:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b40      	ldr	r3, [pc, #256]	@ (8001bec <HAL_RCC_OscConfig+0x784>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001af6:	3a01      	subs	r2, #1
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b00:	0212      	lsls	r2, r2, #8
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b08:	0852      	lsrs	r2, r2, #1
 8001b0a:	3a01      	subs	r2, #1
 8001b0c:	0552      	lsls	r2, r2, #21
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b14:	0852      	lsrs	r2, r2, #1
 8001b16:	3a01      	subs	r2, #1
 8001b18:	0652      	lsls	r2, r2, #25
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b20:	0912      	lsrs	r2, r2, #4
 8001b22:	0452      	lsls	r2, r2, #17
 8001b24:	430a      	orrs	r2, r1
 8001b26:	4930      	ldr	r1, [pc, #192]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2d      	ldr	r2, [pc, #180]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b44:	f7ff f954 	bl	8000df0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f950 	bl	8000df0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e058      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6a:	e050      	b.n	8001c0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e04f      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d148      	bne.n	8001c0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b88:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b94:	f7ff f92c 	bl	8000df0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f928 	bl	8000df0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e030      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x734>
 8001bba:	e028      	b.n	8001c0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d023      	beq.n	8001c0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_RCC_OscConfig+0x780>)
 8001bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f90f 	bl	8000df0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e00c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff f90b 	bl	8000df0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d905      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e013      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCC_OscConfig+0x7b0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ec      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_RCC_OscConfig+0x7b0>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4905      	ldr	r1, [pc, #20]	@ (8001c18 <HAL_RCC_OscConfig+0x7b0>)
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x7b4>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e001      	b.n	8001c0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	feeefffc 	.word	0xfeeefffc

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0e7      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b75      	ldr	r3, [pc, #468]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b72      	ldr	r3, [pc, #456]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4970      	ldr	r1, [pc, #448]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b6e      	ldr	r3, [pc, #440]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0cf      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b63      	ldr	r3, [pc, #396]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4960      	ldr	r1, [pc, #384]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04c      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0a6      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b54      	ldr	r3, [pc, #336]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e09a      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e08e      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e086      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4943      	ldr	r1, [pc, #268]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff f872 	bl	8000df0 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f86e 	bl	8000df0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e06e      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d208      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b2e      	ldr	r3, [pc, #184]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	492b      	ldr	r1, [pc, #172]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d66:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d210      	bcs.n	8001d96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d74:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	4923      	ldr	r1, [pc, #140]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e036      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4918      	ldr	r1, [pc, #96]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4910      	ldr	r1, [pc, #64]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd4:	f000 f824 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	490b      	ldr	r1, [pc, #44]	@ (8001e14 <HAL_RCC_ClockConfig+0x1f4>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_RCC_ClockConfig+0x1f8>)
 8001df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_RCC_ClockConfig+0x1fc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ffa9 	bl	8000d50 <HAL_InitTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	080028f8 	.word	0x080028f8
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e38:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x34>
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d121      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d11e      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e54:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e60:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e004      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d134      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d003      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xac>
 8001ec4:	e005      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	e005      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ece:	617b      	str	r3, [r7, #20]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	617b      	str	r3, [r7, #20]
      break;
 8001ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	fb03 f202 	mul.w	r2, r3, r2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0e5b      	lsrs	r3, r3, #25
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f18:	69bb      	ldr	r3, [r7, #24]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08002908 	.word	0x08002908
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f50:	f7ff fa26 	bl	80013a0 <HAL_PWREx_GetVoltageRange>
 8001f54:	6178      	str	r0, [r7, #20]
 8001f56:	e014      	b.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f64:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff fa16 	bl	80013a0 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f88:	d10b      	bne.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b80      	cmp	r3, #128	@ 0x80
 8001f8e:	d919      	bls.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f94:	d902      	bls.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f96:	2302      	movs	r3, #2
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e013      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e010      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	@ 0x80
 8001fa6:	d902      	bls.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa8:	2303      	movs	r3, #3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e00a      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d102      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e004      	b.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b70      	cmp	r3, #112	@ 0x70
 8001fbe:	d101      	bne.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	4909      	ldr	r1, [pc, #36]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e095      	b.n	8002136 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800201a:	d009      	beq.n	8002030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
 8002022:	e005      	b.n	8002030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fdb0 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002070:	d902      	bls.n	8002078 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e002      	b.n	800207e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002086:	d007      	beq.n	8002098 <HAL_SPI_Init+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002090:	d002      	beq.n	8002098 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	ea42 0103 	orr.w	r1, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	f003 0204 	and.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002114:	ea42 0103 	orr.w	r1, r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b08a      	sub	sp, #40	@ 0x28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002150:	f7fe fe4e 	bl	8000df0 <HAL_GetTick>
 8002154:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800215c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00c      	beq.n	800218c <HAL_SPI_TransmitReceive+0x4e>
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002178:	d106      	bne.n	8002188 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_SPI_TransmitReceive+0x4a>
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d001      	beq.n	800218c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	e1f3      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_SPI_TransmitReceive+0x60>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_SPI_TransmitReceive+0x60>
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1e8      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x72>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e1e1      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d003      	beq.n	80021cc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2205      	movs	r2, #5
 80021c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800220e:	d802      	bhi.n	8002216 <HAL_SPI_TransmitReceive+0xd8>
 8002210:	8abb      	ldrh	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d908      	bls.n	8002228 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e007      	b.n	8002238 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002236:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b40      	cmp	r3, #64	@ 0x40
 8002244:	d007      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800225e:	f240 8083 	bls.w	8002368 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x132>
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d16f      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002294:	e05c      	b.n	8002350 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d11b      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x19e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <HAL_SPI_TransmitReceive+0x19e>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d113      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	1c9a      	adds	r2, r3, #2
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d11c      	bne.n	8002324 <HAL_SPI_TransmitReceive+0x1e6>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	b292      	uxth	r2, r2
 8002302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002320:	2301      	movs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002324:	f7fe fd64 	bl	8000df0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002330:	429a      	cmp	r2, r3
 8002332:	d80d      	bhi.n	8002350 <HAL_SPI_TransmitReceive+0x212>
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d009      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e111      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d19d      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x158>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d197      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x158>
 8002366:	e0e5      	b.n	8002534 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x23a>
 8002370:	8afb      	ldrh	r3, [r7, #22]
 8002372:	2b01      	cmp	r3, #1
 8002374:	f040 80d1 	bne.w	800251a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d912      	bls.n	80023a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b02      	subs	r3, #2
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023a6:	e0b8      	b.n	800251a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	330c      	adds	r3, #12
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ce:	e0a4      	b.n	800251a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d134      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x30a>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02f      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x30a>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d12c      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d912      	bls.n	800241e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b02      	subs	r3, #2
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800241c:	e012      	b.n	8002444 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d148      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x3aa>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d042      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d923      	bls.n	80024b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	b292      	uxth	r2, r2
 800247a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b02      	subs	r3, #2
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d81f      	bhi.n	80024e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	e016      	b.n	80024e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f103 020c 	add.w	r2, r3, #12
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024e4:	2301      	movs	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024e8:	f7fe fc82 	bl	8000df0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d803      	bhi.n	8002500 <HAL_SPI_TransmitReceive+0x3c2>
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x3c8>
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e02c      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f af55 	bne.w	80023d0 <HAL_SPI_TransmitReceive+0x292>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f af4e 	bne.w	80023d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f93d 	bl	80027b8 <SPI_EndRxTxTransaction>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002572:	2300      	movs	r3, #0
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	@ 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800258c:	f7fe fc30 	bl	8000df0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800259c:	f7fe fc28 	bl	8000df0 <HAL_GetTick>
 80025a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	015b      	lsls	r3, r3, #5
 80025a8:	0d1b      	lsrs	r3, r3, #20
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b2:	e054      	b.n	800265e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d050      	beq.n	800265e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025bc:	f7fe fc18 	bl	8000df0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d902      	bls.n	80025d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d13d      	bne.n	800264e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ea:	d111      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f4:	d004      	beq.n	8002600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fe:	d107      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800260e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002618:	d10f      	bne.n	800263a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e017      	b.n	800267e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3b01      	subs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	429a      	cmp	r2, r3
 800267a:	d19b      	bne.n	80025b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000

0800268c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800269e:	f7fe fba7 	bl	8000df0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026ae:	f7fe fb9f 	bl	8000df0 <HAL_GetTick>
 80026b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	0d1b      	lsrs	r3, r3, #20
 80026cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026d4:	e060      	b.n	8002798 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026dc:	d107      	bne.n	80026ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d050      	beq.n	8002798 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026f6:	f7fe fb7b 	bl	8000df0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d902      	bls.n	800270c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13d      	bne.n	8002788 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800271a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002724:	d111      	bne.n	800274a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800272e:	d004      	beq.n	800273a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002738:	d107      	bne.n	800274a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002748:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002752:	d10f      	bne.n	8002774 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002772:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e010      	b.n	80027aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3b01      	subs	r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d196      	bne.n	80026d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3728      	adds	r7, #40	@ 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000

080027b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff5b 	bl	800268c <SPI_WaitFifoStateUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e027      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2180      	movs	r1, #128	@ 0x80
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fec0 	bl	800257c <SPI_WaitFlagStateUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e014      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff ff34 	bl	800268c <SPI_WaitFifoStateUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e000      	b.n	800283c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <memset>:
 8002844:	4402      	add	r2, r0
 8002846:	4603      	mov	r3, r0
 8002848:	4293      	cmp	r3, r2
 800284a:	d100      	bne.n	800284e <memset+0xa>
 800284c:	4770      	bx	lr
 800284e:	f803 1b01 	strb.w	r1, [r3], #1
 8002852:	e7f9      	b.n	8002848 <memset+0x4>

08002854 <__libc_init_array>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4d0d      	ldr	r5, [pc, #52]	@ (800288c <__libc_init_array+0x38>)
 8002858:	4c0d      	ldr	r4, [pc, #52]	@ (8002890 <__libc_init_array+0x3c>)
 800285a:	1b64      	subs	r4, r4, r5
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	2600      	movs	r6, #0
 8002860:	42a6      	cmp	r6, r4
 8002862:	d109      	bne.n	8002878 <__libc_init_array+0x24>
 8002864:	4d0b      	ldr	r5, [pc, #44]	@ (8002894 <__libc_init_array+0x40>)
 8002866:	4c0c      	ldr	r4, [pc, #48]	@ (8002898 <__libc_init_array+0x44>)
 8002868:	f000 f818 	bl	800289c <_init>
 800286c:	1b64      	subs	r4, r4, r5
 800286e:	10a4      	asrs	r4, r4, #2
 8002870:	2600      	movs	r6, #0
 8002872:	42a6      	cmp	r6, r4
 8002874:	d105      	bne.n	8002882 <__libc_init_array+0x2e>
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	f855 3b04 	ldr.w	r3, [r5], #4
 800287c:	4798      	blx	r3
 800287e:	3601      	adds	r6, #1
 8002880:	e7ee      	b.n	8002860 <__libc_init_array+0xc>
 8002882:	f855 3b04 	ldr.w	r3, [r5], #4
 8002886:	4798      	blx	r3
 8002888:	3601      	adds	r6, #1
 800288a:	e7f2      	b.n	8002872 <__libc_init_array+0x1e>
 800288c:	08002938 	.word	0x08002938
 8002890:	08002938 	.word	0x08002938
 8002894:	08002938 	.word	0x08002938
 8002898:	0800293c 	.word	0x0800293c

0800289c <_init>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr

080028a8 <_fini>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr
